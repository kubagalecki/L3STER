name: tests
on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:

env:
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1

jobs:
  buildx_setup:
    name: Buildx setup
    runs-on: self-hosted
    steps:
      - uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

  build_base_container:
    name: Build base container
    runs-on: self-hosted
    needs: buildx_setup
    steps:
      - uses: actions/checkout@v4
      - name: Build dependencies
        uses: whoan/docker-build-with-cache-action@v8
        if: steps.buildx.outcome == 'success'
        with:
          username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          password: "${{ secrets.DOCKER_HUB_TOKEN }}"
          image_name: l3ster-ci
          dockerfile: scripts/ci/Dockerfile.base
          build_extra_args: --network=host

  unit_tests_and_static_analysis:
    name: Static analysis and unit tests
    needs: build_base_container
    runs-on: self-hosted
    container: kubagalecki/l3ster-ci:latest
    env:
      BUILD_TYPE: Release
      TOOLCHAIN_PATH: ../cmake/toolchains/StaticAnalysis.cmake
    steps:
      - uses: actions/checkout@v4
      - name: Build and run tests
        run: scripts/ci/build-and-run-tests.sh
      - name: Cleanup
        if: always()
        run: rm -rf build/

  sanitizers:
    name: Sanitizers
    needs: unit_tests_and_static_analysis
    runs-on: self-hosted
    container: kubagalecki/l3ster-ci:latest
    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      TOOLCHAIN_PATH: "../cmake/toolchains/${{ matrix.sanitizer }}Sanitizer.cmake"
    strategy:
      matrix:
        build_type: [ Debug, Release ]
        sanitizer: [ Address, UndefinedBehavior ] # Thread disabled, too many false positives with TBB
    steps:
      - uses: actions/checkout@v4
      - name: Build and run tests
        run: scripts/ci/build-and-run-tests.sh
        continue-on-error: true # Allow sanitizers to fail
      - name: Cleanup
        if: always()
        run: rm -rf build/

  deployment:
    name: Deployment tests
    needs: unit_tests_and_static_analysis
    runs-on: self-hosted
    container: kubagalecki/l3ster-ci:latest
    env:
      DEPLOYMENT_TESTS: true
      BUILD_TYPE: Release
      TOOLCHAIN_PATH: ../cmake/toolchains/StaticAnalysis.cmake
    steps:
      - uses: actions/checkout@v4
      - name: Build and run tests
        run: scripts/ci/build-and-run-tests.sh
      - name: Cleanup
        if: always()
        run: rm -rf build/

  examples:
    name: Build examples
    needs: unit_tests_and_static_analysis
    runs-on: self-hosted
    container: kubagalecki/l3ster-ci:latest
    env:
      BUILD_TYPE: Release
    steps:
      - uses: actions/checkout@v4
      - name: Build examples
        run: scripts/ci/build-examples.sh
      - name: Cleanup
        if: always()
        run: rm -rf examples/build/

  coverage:
    name: Code coverage
    needs: [ sanitizers, deployment, examples ]
    runs-on: self-hosted
    container: kubagalecki/l3ster-ci:latest
    env:
      BUILD_TYPE: Debug
      TOOLCHAIN_PATH: ../cmake/toolchains/Coverage.cmake
    steps:
      - uses: actions/checkout@v4
      - name: Build and run tests
        run: scripts/ci/build-and-run-tests.sh
      - name: Gather coverage results via gcovr
        run: |
          gcovr --verbose --xml --print-summary --exclude-unreachable-branches --exclude-throw-branches \
          --root "$GITHUB_WORKSPACE" \
          --exclude "$GITHUB_WORKSPACE/tests/" \
          --output "$GITHUB_WORKSPACE/coverage_report.xml" \
          "$GITHUB_WORKSPACE/build/tests/"
      - name: Cleanup
        if: always()
        run: rm -rf build/
      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
