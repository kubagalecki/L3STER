name: tests
on: push
env:
  DOCKER_BASE: "${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_IMAGE }}:latest"

jobs:
  build_base_container:
    name: Build base container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: whoan/docker-build-with-cache-action@v5
        id: docker-base-cache
        with:
          username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          password: "${{ secrets.DOCKER_HUB_TOKEN }}"
          image_name: "${{ secrets.DOCKER_HUB_IMAGE }}"
          dockerfile: scripts/ci/Dockerfile.base

  unit_tests_and_static_analysis:
    name: Static analysis and unit tests
    needs: build_base_container
    runs-on: ubuntu-latest
    env:
      CMAKE_BUILD_TYPE: Release
      CMAKE_TOOLCHAIN_PATH: ../cmake/toolchains/StaticAnalysis.cmake
      REPORT_COVERAGE: false
    steps:
      - uses: actions/checkout@v2
      - name: Append docker base
        run: sed -i '1 i\FROM '"$DOCKER_BASE" $GITHUB_WORKSPACE/Dockerfile
      - uses: ./scripts/ci/run-unit-tests

  sanitizers:
    name: Sanitizers
    needs: unit_tests_and_static_analysis
    runs-on: ubuntu-latest
    env:
      CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
      CMAKE_TOOLCHAIN_PATH: "../cmake/toolchains/${{ matrix.sanitizer }}Sanitizer.cmake"
      REPORT_COVERAGE: false
    strategy:
      matrix:
        build_type: [ Debug, Release ]
        sanitizer: [ Address, Leak, Thread, UndefinedBehavior ]
    steps:
      - uses: actions/checkout@v2
      - name: Append docker base
        run: sed -i '1 i\FROM '"$DOCKER_BASE" $GITHUB_WORKSPACE/Dockerfile
      - uses: ./scripts/ci/run-unit-tests

  coverage:
    name: Code coverage
    needs: sanitizers
    runs-on: ubuntu-latest
    env:
      CMAKE_BUILD_TYPE: Debug
      CMAKE_TOOLCHAIN_PATH: ../cmake/toolchains/Coverage.cmake
      REPORT_COVERAGE: true
    steps:
      - uses: actions/checkout@v2
      - name: Append docker base
        run: sed -i '1 i\FROM '"$DOCKER_BASE" $GITHUB_WORKSPACE/Dockerfile
      - uses: ./scripts/ci/run-unit-tests
        with:
          codecov_token: "${{ secrets.CODECOV_TOKEN }}"